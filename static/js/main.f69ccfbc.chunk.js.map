{"version":3,"sources":["BooksAPI.js","Book.js","SearchPage.js","BookShelf.js","BooksPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","data","books","Book","updateShelf","event","props","changeShelf","target","value","this","title","currentShelf","item","className","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","defaultValue","disabled","key","authors","Component","SearchPage","state","booksReturned","searchedBooks","inputValue","setState","BooksAPI","trim","response","hasContent","length","to","type","placeholder","map","mappedBook","index","BookShelf","filter","BooksPage","BooksApp","bookToUpdate","prevState","concat","path","render","exact","React","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.f69ccfbc.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Book extends Component {\n\n    static propTypes = {\n        book: PropTypes.object.isRequired,\n        books: PropTypes.array.isRequired,\n        changeShelf: PropTypes.func.isRequired\n    }\n\n    updateShelf = (event) => this.props.changeShelf(this.props.book, event.target.value);\n\n    render() {\n\n        const {book, books} = this.props\n        const title = book.title !== null ? book.title : 'No title'\n\n        // set current shelf to none as default\n        let currentShelf = 'none';\n\n        // if book is in current list, set current shelf to book.shelf\n        for (let item of books) {\n            if (item.id === book.id) {\n                currentShelf = item.shelf;\n                break;\n            }\n        }\n        return (\n            <li>\n                <div className=\"book\">\n                    <div className=\"book-top\">\n                        <div className=\"book-cover\" style={\n                            { \n                                width: 128, \n                                height: 193,\n                                backgroundImage: `url(${book.imageLinks.thumbnail})` \n                            }}>\n                        </div>\n                        <div className=\"book-shelf-changer\">\n                            <select onChange={this.updateShelf} defaultValue={currentShelf}>\n                                <option value=\"move\" disabled>Move to...</option>\n                                <option value=\"currentlyReading\">Currently Reading</option>\n                                <option value=\"wantToRead\">Want to Read</option>\n                                <option value=\"read\">Read</option>\n                                <option value=\"none\">None</option>\n                            </select>\n                        </div>\n                        </div>\n                        <div className=\"book-title\">{title}</div>\n                        <div className=\"book-authors\" key>{book.authors}</div>             \n                </div>\n            </li>\n        )\n    }\n}\nexport default Book","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport * as BooksAPI from './BooksAPI'\nimport { Link } from 'react-router-dom'\nimport Book from './Book'\n\nclass SearchPage extends Component {\n\tstatic propTypes = {\n\t\tbooks: PropTypes.array.isRequired,\n\t\tchangeShelf: PropTypes.func.isRequired\n\t}\n\n\tstate = {\n\t\tquery: '',\n\t\tbooksReturned: []\n\t}\n\n\tsearchedBooks = (event) => {\n\t\tconst inputValue = event.target.value\n\n\t\tif(inputValue) {\n\t\t\tthis.setState({\n\t\t\t\tquery: inputValue\n\t\t\t})\n\t\t\tBooksAPI.search(inputValue.trim(), 30).then((response) =>this.setState({\n\t\t\t\tbooksReturned: response\n\t\t\t}))\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tbooksReturned: []\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { booksReturned } = this.state\n\t\tconst { books, changeShelf } = this.props\n\t\tconst hasContent = booksReturned.length > 0\n\t\treturn (\n\t\t\t<div className=\"search-books\">\n            \t<div className=\"search-books-bar\">\n            \t\t<Link className=\"close-search\" to=\"/\">Close</Link>\n            \t\t<div className=\"search-books-input-wrapper\">\n                \t\t{/*\n\t\t                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n\t\t                  You can find these search terms here:\n\t\t                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n\t\t                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n\t\t                  you don't find a specific author or title. Every search is limited by search terms.\n\t\t                */}\n               \t\t\t<input type=\"text\" placeholder=\"Search by title or author\" onChange={this.searchedBooks} />\n            \t\t</div>\n            \t</div>\n            \t<div className=\"search-books-results\">\n            \t{\n            \t\thasContent && (\n            \t\t\t<div>\n            \t\t\t\t<h3>Search returned {booksReturned.length} Books</h3>\n            \t\t\t\t<ol className=\"books-grid\">\n              \t\t\t\t\t{booksReturned.map((mappedBook,index) => (\n              \t\t\t\t\t\t<Book \n              \t\t\t\t\t\tbook={mappedBook} \n              \t\t\t\t\t\tbooks={books} \n              \t\t\t\t\t\tchangeShelf={changeShelf}\n              \t\t\t\t\t\tkey={index}\n              \t\t\t\t\t\t/>\n              \t\t\t\t\t)\n\n              \t\t\t\t\t)}\n              \t\t\t\t</ol>\n            \t\t\t</div>\n            \t\t)\n            \t}\n              \t\t\n            \t</div>\n          \t</div>\n\t\t)\n\t}\n\n}\nexport default SearchPage","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Book from './Book'\n\nclass BookShelf extends Component {\n\n\tstatic propTypes = {\n\t\tshelf: PropTypes.object.isRequired,\n\t\tbooks: PropTypes.array.isRequired,\n\t\tchangeShelf: PropTypes.func.isRequired\n\t}\n\n\trender() {\n\n\t\tconst { shelf, books, changeShelf } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">{ shelf.title }</h2>\n                <div className=\"bookshelf-books\">\n                \t<ol className=\"books-grid\">\n                \t\t{books.filter((book) => book.shelf === shelf.type).map((book,index) => (\n                \t\t\t<Book book={book} books={books} changeShelf={changeShelf} key={index} />\n                \t\t))}\n                    </ol>\n                </div>\n            </div>\n\t\t)\n\t}\n\n}\nexport default BookShelf","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport BookShelf from './BookShelf'\n\nclass BooksPage extends Component {\n\n\tstatic propTypes = {\n\t\tbooks: PropTypes.array.isRequired,\n\t\tchangeShelf: PropTypes.func.isRequired\n\t}\n\n\trender() {\n\t\tconst { books, changeShelf } = this.props\n\t\tconst shelfs = [\n\t\t\t{type: 'currentlyReading', title: 'Currently Reading'},\n\t\t\t{type: 'wantToRead', title: 'Want to Read'},\n\t\t\t{type: 'read', title: 'Read'}\n\t\t]\t\t\n\t\treturn (\n\t\t\t<div className=\"list-books\">\n\t\t\t\t<div className=\"list-books-title\">\n              \t\t<h1>MyReads</h1>\n            \t</div>\n            \t<div className=\"list-books-content\">\n            \t\t{\n            \t\t\tshelfs.map((shelf,index) => (\n            \t\t\t\t<BookShelf shelf={shelf} books={books} changeShelf={changeShelf} key={index}/>\n            \t\t\t\t))\n            \t\t}\n            \t</div>\n            \t<div className=\"open-search\">\n            \t\t<Link className=\"button-link\" to=\"/search\">Add a book</Link>\n            \t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\nexport default BooksPage","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport { Route } from 'react-router-dom'\nimport SearchPage from './SearchPage'\nimport BooksPage from './BooksPage'\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n     books: []\n  }\n\ncomponentDidMount(){\n  BooksAPI.getAll().then((books) => {\n    this.setState({\n      books\n    })\n  }\n)}\n\nchangeShelf = (bookToUpdate, shelf) => {\n  BooksAPI.update(bookToUpdate, shelf).then((response) => {\n    bookToUpdate.shelf = shelf\n    this.setState((prevState) => ({\n      books: prevState.books.filter(book => book.id !== bookToUpdate.id).concat(bookToUpdate)\n    }))\n  })\n}\n\n  render() {\n    const { books } = this.state\n    return (\n      <div className=\"app\">\n        <Route path=\"/search\" render={() => <SearchPage books={books} changeShelf={this.changeShelf} />} />            \n        <Route exact path=\"/\" render={() => <BooksPage books={books} changeShelf={this.changeShelf} />} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}